find_program(CMAKE_EXISTS "cmake")
if(CMAKE_EXISTS)
	message(STATUS "CMake Path: ${CMAKE_EXISTS}")
else()
	message(FATAL_ERROR "CMake is not found please install CMake version higher than 3.19")
endif()

if(NOT DEFINED PROJECT_DIR)
	set(PROJECT_DIR "${CMAKE_SOURCE_DIR}")
endif()
set_property(GLOBAL PROPERTY DEBUG_CONFIGURATIONS Debug)

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /UMBCS /D_UNICODE /DUNICODE")

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if(WIN32 AND CMAKE_SIZEOF_VOID_P EQUAL 8)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/bin")
message(STATUS ${CMAKE_LIBRARY_OUTPUT_DIRECTORY})
endif()

set (GAME_PROJECT_NAME SampleTest CACHE STRING "Sample project name" FORCE)
set(ENGINE_SOURCE_DIR "${CMAKE_SOURCE_DIR}/Engine" CACHE STRING "Engine Directory" FORCE)
set(PROJECT_ROOT_DIR "${CMAKE_SOURCE_DIR}" CACHE STRING "Root Directory" FORCE)
file(TO_NATIVE_PATH ${PROJECT_ROOT_DIR} PROJECT_ROOT_DIR_NATIVE_OS)
set(PROJECT_ROOT_DIR_NATIVE_OS "${PROJECT_ROOT_DIR_NATIVE_OS}" CACHE STRING "Source root path os specific backslashes")
set (PROJECT_ROOT_DIR_NATIVE_OS_STR "${PROJECT_ROOT_DIR_NATIVE_OS_STR}" CACHE STRING "")
string(REPLACE "\\" "\\\\" PROJECT_ROOT_DIR_NATIVE_OS_STR ${PROJECT_ROOT_DIR_NATIVE_OS})

set(CMAKE_CONFIGURATION_TYPES Debug Release CACHE STRING "" FORCE)

# set target platform windows(64-bit only), linux, etc
string(TOUPPER "${TARGET_PLATFORM}" TARGET_PLATFORM_UPPERCASE)
string(TOLOWER "${TARGET_PLATFORM}" TARGET_PLATFORM_LOWERCASE)
# check and set appropriate compile flag
if("${TARGET_PLATFORM_UPPERCASE}" STREQUAL "WINDOWS")
	set(TARGET_PLATFORM "Windows")
	add_compile_definitions(${ENGINE_LIB_STATIC} PLATFORM_WINDOWS=1)
endif()

if(MSVC)
	# enable multi-processor compilation for MSVC for all projects
	add_compile_options(/MP)
endif()
